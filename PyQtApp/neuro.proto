syntax = "proto3";

option csharp_namespace = "NeuroProtos";

package NeuroDataProcessing;

enum DroneType {
  Autel = 0;
  Fpv = 1;
  Dji = 2;
  Wifi = 3;
}

enum ConnectionState {
  Connected = 0;
  Disconnected = 1;
}

message UavObject {
    DroneType type = 1;
    bool state = 2;
    int32 freq = 3;
}

message ChannelObject {
    string name = 1;
    string hardware_type = 2;
    repeated int64 central_freq = 3;
}

// Сообщение для стрима данных
message DataResponse {
    string band_name = 1;
    repeated UavObject uavs = 2;
    optional bytes detected_img = 3;
    optional bytes clear_img = 4;
    optional bytes spectrum = 5;
}

// Запрос на начало стрима с результатами распознавания
message ProceedDataStreamRequest {
    bool detected_img = 1;
    bool clear_img = 2;
    bool spectrum = 3;
}

// Пустой запрос
message VoidRequest {
}

// Сообщение для стрима ошибок
message ServerErrorResponse {
    bool status = 1;
    string msg = 2;
}

// Запрос о доступных каналах обработки
message ChannelsRequest {
}

// Ответ на запрос о доступных каналах обработки
message ChannelsResponse {
    repeated string channels = 1;
    repeated ChannelObject info = 2;
}

// Запрос на старт канала обработки
message StartChannelRequest {
    string connection_name = 1;
}

// Ответ на запрос о старте канала обработки
message StartChannelResponse {
    ConnectionState channelConnectionState = 1;
    string description = 2;
}

// Запрос на изменение Z-шкалы
message ZScaleRequest {
    string band_name = 1;
    int32 z_min = 2;
    int32 z_max = 3;
}

// Ответ на запрос об изменении Z-шкалы
message ZScaleResponse {
    string status = 1;
}

// Запрос на текущую Z-шкалу
message CurrentZScaleRequest {
}

// Ответ на запрос об текущей Z-шкале
message CurrentZScaleResponse {
   repeated string band_names = 1;
   repeated int32 z_min = 2;
   repeated int32 z_max = 3;
}

// Запрос на сохранение конфига
message SaveConfigRequest {
    bytes password_hash = 1;
}

// Ответ на запрос о сохранении конфига
message SaveConfigResponse {
    string status = 1;
}

// Запрос на изменение параметров распознавания
message RecognitionSettingsRequest {
    string band_name = 1;
    int32 accumulation_size = 2;
    double threshold = 3;
    double exceedance = 4;
}

// Ответ на запрос об изменении параметров распознавания
message RecognitionSettingsResponse {
    string status = 1;
}

// Запрос на получение параметров распознавания
message GetRecognitionSettingsRequest {
}

// Ответ на запрос о получении параметров распознавания
message GetRecognitionSettingsResponse {
    repeated string band_name = 1;
    repeated int32 accumulation_size = 2;
    repeated double threshold = 3;
    repeated double exceedance = 4;
}

// Запрос на включение/выключение накопления
message OnOffAccumulationRequest {
    bool accum_status = 1;
}

// Ответ на запрос о включении/выключении накопления
message OnOffAccumulationResponse {
    string accum_status = 1;
}

// Запрос о статусе процесса
message GetProcessStatusRequest {
    string channel_name = 1;
}

// Ответ на запрос о статусе процесса
message GetProcessStatusResponse {
    bool status = 1;
}

// Запрос на рестарт процесса
message RestartProcessRequest {
    string channel_name = 1;
}

// Ответ на запрос о рестарте процесса
message RestartProcessResponse {
    bool status = 1;
}

message SetFrequencyRequest {
    string channel_name = 1;
    int64 value = 2;
}

message SetFrequencyResponse {
    string status = 1;
}

message SetGainRequest {
    string channel_name = 1;
    int32 value = 2;
}

message SetGainResponse {
    string status = 1;
}

message AlinxSoftVerRequest {
}

message AlinxSoftVerResponse {
    string version = 1;
}


// Сервисы обработки данных
service DataProcessingService {
    rpc GetAvailableChannels (ChannelsRequest) returns (ChannelsResponse);
    rpc StartChannel (StartChannelRequest) returns (StartChannelResponse);   // RPC для старта канала обработки
    rpc ProceedDataStream (ProceedDataStreamRequest) returns (stream DataResponse); // RPC для отправки данных
    rpc ServerErrorStream (VoidRequest) returns (stream ServerErrorResponse); // RPC для серверных ошибок
    rpc ZScaleChanging (ZScaleRequest) returns (ZScaleResponse);
    rpc SaveConfig (SaveConfigRequest) returns (SaveConfigResponse);
    rpc RecognitionSettings (RecognitionSettingsRequest) returns (RecognitionSettingsResponse);
    rpc GetRecognitionSettings (GetRecognitionSettingsRequest) returns (GetRecognitionSettingsResponse);
    rpc GetCurrentZScale (CurrentZScaleRequest) returns (CurrentZScaleResponse);
    rpc OnOffAccumulation (OnOffAccumulationRequest) returns (OnOffAccumulationResponse);
    rpc GetProcessStatus (GetProcessStatusRequest) returns (GetProcessStatusResponse);
    rpc RestartProcess (RestartProcessRequest) returns (RestartProcessResponse);
    rpc SetFrequency (SetFrequencyRequest) returns (SetFrequencyResponse);
    rpc SetGain (SetGainRequest) returns (SetGainResponse);
    rpc AlinxSoftVer (AlinxSoftVerRequest) returns (AlinxSoftVerResponse);
}