syntax = "proto3";

option csharp_namespace = "NeuroProtos";

package NeuroDataProcessing;

enum DroneType {
  Autel = 0;
  Fpv = 1;
  Dji = 2;
  Wifi = 3;
}

enum ConnectionState {
  Connected = 0;
  Disconnected = 1;
}

message UavObject {
    DroneType type = 1;
    bool state = 2;
    int32 freq = 3;
}

// Сообщение для стрима данных
message DataResponse {
    string band_name = 1;
    repeated UavObject uavs = 2;
    optional bytes detected_img = 3;
    optional bytes clear_img = 4;
    optional bytes spectrum = 5;
}

// Запрос на начало стрима с результатами распознавания
message ProceedDataStreamRequest {
    bool detected_img = 1;
    bool clear_img = 2;
    bool spectrum = 3;
}

// Пустой запрос
message VoidRequest {
}

// Сообщение для стрима ошибок
message ServerErrorResponse {
    bool status = 1;
    string msg = 2;
}

// Запрос на старт канала обработки
message StartChannelRequest {
    string connection_name = 1;
}

// Ответ на запрос о старте канала обработки
message StartChannelResponse {
    ConnectionState channelConnectionState = 1;
    string description = 2;
}

// Запрос на изменение Z-шкалы
message ZScaleRequest {
    string band_name = 1;
    int32 z_min = 2;
    int32 z_max = 3;
}

// Ответ на запрос об изменении Z-шкалы
message ZScaleResponse {
    string status = 1;
}

// Запрос на текущую Z-шкалу
message CurrentZScaleRequest {
}

// Ответ на запрос об текущей Z-шкале
message CurrentZScaleResponse {
   repeated string band_names = 1;
   repeated int32 z_min = 2;
   repeated int32 z_max = 3;
}

// Запрос о доступных каналах обработки
message ChannelsRequest {
}

// Ответ на запрос о доступных каналах обработки
message ChannelsResponse {
    repeated string channels = 1;
}

// Запрос на загрузку конфига
message LoadConfigRequest {
    string config = 1;
    bytes password_hash = 2;
}

// Ответ на запрос о загрузке конфиге
message LoadConfigResponse {
    string status = 1;
}

message SaveConfigRequest {
    bytes password_hash = 1;
}

message SaveConfigResponse {
    string status = 1;
}

message RecognitionSettingsRequest {
    string band_name = 1;
    int32 accumulation_size = 2;
    double threshold = 3;
    double exceedance = 4;
}

message RecognitionSettingsResponse {
    string status = 1;
}

message GetRecognitionSettingsRequest {       // Запрос параметров при старте клиента
}

message GetRecognitionSettingsResponse {
    repeated string band_name = 1;
    repeated int32 accumulation_size = 2;
    repeated double threshold = 3;
    repeated double exceedance = 4;
}

message OnOffAccumulationRequest {
    bool accum_status = 1;
}

message OnOffAccumulationResponse {
    string accum_status = 1;
}

message GetProcessStatusRequest {
    string channel_name = 1;
}

message GetProcessStatusResponse {
    bool status=1;
}

message RestartProcessRequest {
    string channel_name=1;
}

message RestartProcessResponse {
    bool status=1;
}

// Сервис обработки данных
service DataProcessingService {
    rpc GetAvailableChannels (ChannelsRequest) returns (ChannelsResponse);
    rpc StartChannel (StartChannelRequest) returns (StartChannelResponse);   // RPC для старта канала обработки
    rpc ProceedDataStream (ProceedDataStreamRequest) returns (stream DataResponse); // RPC для отправки данных

    rpc ServerErrorStream (VoidRequest) returns (stream ServerErrorResponse); // RPC для серверных ошибок
    rpc ZScaleChanging (ZScaleRequest) returns (ZScaleResponse);
    rpc LoadConfig (LoadConfigRequest) returns (LoadConfigResponse);
    rpc SaveConfig (SaveConfigRequest) returns (SaveConfigResponse);
    rpc RecognitionSettings (RecognitionSettingsRequest) returns (RecognitionSettingsResponse);
    rpc GetRecognitionSettings (GetRecognitionSettingsRequest) returns (GetRecognitionSettingsResponse);
    rpc GetCurrentZScale (CurrentZScaleRequest) returns (CurrentZScaleResponse);
    rpc OnOffAccumulation (OnOffAccumulationRequest) returns (OnOffAccumulationResponse);
    rpc GetProcessStatus (GetProcessStatusRequest) returns (GetProcessStatusResponse);
    rpc RestartProcess (RestartProcessRequest) returns (RestartProcessResponse);
}


