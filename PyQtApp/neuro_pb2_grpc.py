# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import neuro_pb2 as neuro__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in neuro_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DataProcessingServiceStub(object):
    """Сервисы обработки данных
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAvailableChannels = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/GetAvailableChannels',
                request_serializer=neuro__pb2.ChannelsRequest.SerializeToString,
                response_deserializer=neuro__pb2.ChannelsResponse.FromString,
                _registered_method=True)
        self.StartChannel = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/StartChannel',
                request_serializer=neuro__pb2.StartChannelRequest.SerializeToString,
                response_deserializer=neuro__pb2.StartChannelResponse.FromString,
                _registered_method=True)
        self.ProceedDataStream = channel.unary_stream(
                '/NeuroDataProcessing.DataProcessingService/ProceedDataStream',
                request_serializer=neuro__pb2.ProceedDataStreamRequest.SerializeToString,
                response_deserializer=neuro__pb2.DataResponse.FromString,
                _registered_method=True)
        self.ServerErrorStream = channel.unary_stream(
                '/NeuroDataProcessing.DataProcessingService/ServerErrorStream',
                request_serializer=neuro__pb2.VoidRequest.SerializeToString,
                response_deserializer=neuro__pb2.ServerErrorResponse.FromString,
                _registered_method=True)
        self.ZScaleChanging = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/ZScaleChanging',
                request_serializer=neuro__pb2.ZScaleRequest.SerializeToString,
                response_deserializer=neuro__pb2.ZScaleResponse.FromString,
                _registered_method=True)
        self.SaveConfig = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/SaveConfig',
                request_serializer=neuro__pb2.SaveConfigRequest.SerializeToString,
                response_deserializer=neuro__pb2.SaveConfigResponse.FromString,
                _registered_method=True)
        self.RecognitionSettings = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/RecognitionSettings',
                request_serializer=neuro__pb2.RecognitionSettingsRequest.SerializeToString,
                response_deserializer=neuro__pb2.RecognitionSettingsResponse.FromString,
                _registered_method=True)
        self.GetRecognitionSettings = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/GetRecognitionSettings',
                request_serializer=neuro__pb2.GetRecognitionSettingsRequest.SerializeToString,
                response_deserializer=neuro__pb2.GetRecognitionSettingsResponse.FromString,
                _registered_method=True)
        self.GetCurrentZScale = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/GetCurrentZScale',
                request_serializer=neuro__pb2.CurrentZScaleRequest.SerializeToString,
                response_deserializer=neuro__pb2.CurrentZScaleResponse.FromString,
                _registered_method=True)
        self.OnOffAccumulation = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/OnOffAccumulation',
                request_serializer=neuro__pb2.OnOffAccumulationRequest.SerializeToString,
                response_deserializer=neuro__pb2.OnOffAccumulationResponse.FromString,
                _registered_method=True)
        self.GetProcessStatus = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/GetProcessStatus',
                request_serializer=neuro__pb2.GetProcessStatusRequest.SerializeToString,
                response_deserializer=neuro__pb2.GetProcessStatusResponse.FromString,
                _registered_method=True)
        self.RestartProcess = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/RestartProcess',
                request_serializer=neuro__pb2.RestartProcessRequest.SerializeToString,
                response_deserializer=neuro__pb2.RestartProcessResponse.FromString,
                _registered_method=True)
        self.SetFrequency = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/SetFrequency',
                request_serializer=neuro__pb2.SetFrequencyRequest.SerializeToString,
                response_deserializer=neuro__pb2.SetFrequencyResponse.FromString,
                _registered_method=True)
        self.SetGain = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/SetGain',
                request_serializer=neuro__pb2.SetGainRequest.SerializeToString,
                response_deserializer=neuro__pb2.SetGainResponse.FromString,
                _registered_method=True)
        self.AlinxSoftVer = channel.unary_unary(
                '/NeuroDataProcessing.DataProcessingService/AlinxSoftVer',
                request_serializer=neuro__pb2.AlinxSoftVerRequest.SerializeToString,
                response_deserializer=neuro__pb2.AlinxSoftVerResponse.FromString,
                _registered_method=True)


class DataProcessingServiceServicer(object):
    """Сервисы обработки данных
    """

    def GetAvailableChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartChannel(self, request, context):
        """RPC для старта канала обработки
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProceedDataStream(self, request, context):
        """RPC для отправки данных
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerErrorStream(self, request, context):
        """RPC для серверных ошибок
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZScaleChanging(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecognitionSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecognitionSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentZScale(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnOffAccumulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcessStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlinxSoftVer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAvailableChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableChannels,
                    request_deserializer=neuro__pb2.ChannelsRequest.FromString,
                    response_serializer=neuro__pb2.ChannelsResponse.SerializeToString,
            ),
            'StartChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.StartChannel,
                    request_deserializer=neuro__pb2.StartChannelRequest.FromString,
                    response_serializer=neuro__pb2.StartChannelResponse.SerializeToString,
            ),
            'ProceedDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ProceedDataStream,
                    request_deserializer=neuro__pb2.ProceedDataStreamRequest.FromString,
                    response_serializer=neuro__pb2.DataResponse.SerializeToString,
            ),
            'ServerErrorStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerErrorStream,
                    request_deserializer=neuro__pb2.VoidRequest.FromString,
                    response_serializer=neuro__pb2.ServerErrorResponse.SerializeToString,
            ),
            'ZScaleChanging': grpc.unary_unary_rpc_method_handler(
                    servicer.ZScaleChanging,
                    request_deserializer=neuro__pb2.ZScaleRequest.FromString,
                    response_serializer=neuro__pb2.ZScaleResponse.SerializeToString,
            ),
            'SaveConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveConfig,
                    request_deserializer=neuro__pb2.SaveConfigRequest.FromString,
                    response_serializer=neuro__pb2.SaveConfigResponse.SerializeToString,
            ),
            'RecognitionSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognitionSettings,
                    request_deserializer=neuro__pb2.RecognitionSettingsRequest.FromString,
                    response_serializer=neuro__pb2.RecognitionSettingsResponse.SerializeToString,
            ),
            'GetRecognitionSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecognitionSettings,
                    request_deserializer=neuro__pb2.GetRecognitionSettingsRequest.FromString,
                    response_serializer=neuro__pb2.GetRecognitionSettingsResponse.SerializeToString,
            ),
            'GetCurrentZScale': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentZScale,
                    request_deserializer=neuro__pb2.CurrentZScaleRequest.FromString,
                    response_serializer=neuro__pb2.CurrentZScaleResponse.SerializeToString,
            ),
            'OnOffAccumulation': grpc.unary_unary_rpc_method_handler(
                    servicer.OnOffAccumulation,
                    request_deserializer=neuro__pb2.OnOffAccumulationRequest.FromString,
                    response_serializer=neuro__pb2.OnOffAccumulationResponse.SerializeToString,
            ),
            'GetProcessStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcessStatus,
                    request_deserializer=neuro__pb2.GetProcessStatusRequest.FromString,
                    response_serializer=neuro__pb2.GetProcessStatusResponse.SerializeToString,
            ),
            'RestartProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartProcess,
                    request_deserializer=neuro__pb2.RestartProcessRequest.FromString,
                    response_serializer=neuro__pb2.RestartProcessResponse.SerializeToString,
            ),
            'SetFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFrequency,
                    request_deserializer=neuro__pb2.SetFrequencyRequest.FromString,
                    response_serializer=neuro__pb2.SetFrequencyResponse.SerializeToString,
            ),
            'SetGain': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGain,
                    request_deserializer=neuro__pb2.SetGainRequest.FromString,
                    response_serializer=neuro__pb2.SetGainResponse.SerializeToString,
            ),
            'AlinxSoftVer': grpc.unary_unary_rpc_method_handler(
                    servicer.AlinxSoftVer,
                    request_deserializer=neuro__pb2.AlinxSoftVerRequest.FromString,
                    response_serializer=neuro__pb2.AlinxSoftVerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NeuroDataProcessing.DataProcessingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('NeuroDataProcessing.DataProcessingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataProcessingService(object):
    """Сервисы обработки данных
    """

    @staticmethod
    def GetAvailableChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/GetAvailableChannels',
            neuro__pb2.ChannelsRequest.SerializeToString,
            neuro__pb2.ChannelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/StartChannel',
            neuro__pb2.StartChannelRequest.SerializeToString,
            neuro__pb2.StartChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProceedDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/ProceedDataStream',
            neuro__pb2.ProceedDataStreamRequest.SerializeToString,
            neuro__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ServerErrorStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/ServerErrorStream',
            neuro__pb2.VoidRequest.SerializeToString,
            neuro__pb2.ServerErrorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZScaleChanging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/ZScaleChanging',
            neuro__pb2.ZScaleRequest.SerializeToString,
            neuro__pb2.ZScaleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/SaveConfig',
            neuro__pb2.SaveConfigRequest.SerializeToString,
            neuro__pb2.SaveConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecognitionSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/RecognitionSettings',
            neuro__pb2.RecognitionSettingsRequest.SerializeToString,
            neuro__pb2.RecognitionSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecognitionSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/GetRecognitionSettings',
            neuro__pb2.GetRecognitionSettingsRequest.SerializeToString,
            neuro__pb2.GetRecognitionSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentZScale(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/GetCurrentZScale',
            neuro__pb2.CurrentZScaleRequest.SerializeToString,
            neuro__pb2.CurrentZScaleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnOffAccumulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/OnOffAccumulation',
            neuro__pb2.OnOffAccumulationRequest.SerializeToString,
            neuro__pb2.OnOffAccumulationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProcessStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/GetProcessStatus',
            neuro__pb2.GetProcessStatusRequest.SerializeToString,
            neuro__pb2.GetProcessStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestartProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/RestartProcess',
            neuro__pb2.RestartProcessRequest.SerializeToString,
            neuro__pb2.RestartProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/SetFrequency',
            neuro__pb2.SetFrequencyRequest.SerializeToString,
            neuro__pb2.SetFrequencyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/SetGain',
            neuro__pb2.SetGainRequest.SerializeToString,
            neuro__pb2.SetGainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AlinxSoftVer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NeuroDataProcessing.DataProcessingService/AlinxSoftVer',
            neuro__pb2.AlinxSoftVerRequest.SerializeToString,
            neuro__pb2.AlinxSoftVerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
