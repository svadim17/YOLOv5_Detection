syntax = "proto3";

option csharp_namespace = "NeuroProtos";

package NeuroDataProcessing;

enum DroneType {
  Autel = 0;
  Fpv = 1;
  Dji = 2;
  Wifi = 3;
}

enum Status{
   NoError = 0;
   Error = 1;
   Warning = 2;
}

enum ConnectionState {
  Connected = 0;
  Disconnected = 1;
}

message UavObject {
    DroneType type = 1;
    bool state = 2;
    int32 freq = 3;
}

message ChannelObject {
    string name = 1;
    string hardware_type = 2;
    repeated int64 central_freq = 3;
}

message DataResponse {                          // Сообщение для стрима данных
    string band_name = 1;
    repeated UavObject uavs = 2;
    optional bytes detected_img = 3;
    optional bytes clear_img = 4;
    optional bytes spectrum = 5;
    int64 channel_central_freq = 6;
}

message ProceedDataStreamRequest {              // Запрос на начало стрима с результатами распознавания
    bool detected_img = 1;
    bool clear_img = 2;
    bool spectrum = 3;
}

message VoidRequest {                           // Пустой запрос
}

message ServerErrorResponse {                   // Сообщение для стрима ошибок
    Status status = 1;
    string msg = 2;
}

message ChannelsRequest {                       // Запрос о доступных каналах обработки
}

message ChannelsResponse {                      // Ответ на запрос о доступных каналах обработки
    repeated string channels = 1;
    repeated ChannelObject info = 2;
}

message StartChannelRequest {                   // Запрос на старт канала обработки
    string connection_name = 1;
}

message StartChannelResponse {                      // Ответ на запрос о старте канала обработки
    ConnectionState channelConnectionState = 1;
    string description = 2;
}

message ZScaleRequest {                         // Запрос на изменение Z-шкалы
    string band_name = 1;
    int32 z_min = 2;
    int32 z_max = 3;
}

message ZScaleResponse {                        // Ответ на запрос об изменении Z-шкалы
    string status = 1;
}

message CurrentZScaleRequest {                  // Запрос на текущую Z-шкалу
}

message CurrentZScaleResponse {                 // Ответ на запрос об текущей Z-шкале
   repeated string band_names = 1;
   repeated int32 z_min = 2;
   repeated int32 z_max = 3;
}

message SaveConfigRequest {                     // Запрос на сохранение конфига
    bytes password_hash = 1;
}

message SaveConfigResponse {                    // Ответ на запрос о сохранении конфига
    string status = 1;
}

message RecognitionSettingsRequest {            // Запрос на изменение параметров распознавания
    string band_name = 1;
    int32 accumulation_size = 2;
    double threshold = 3;
    double exceedance = 4;
}

message RecognitionSettingsResponse {           // Ответ на запрос об изменении параметров распознавания
    string status = 1;
}

message GetRecognitionSettingsRequest {         // Запрос на получение параметров распознавания
}

message GetRecognitionSettingsResponse {        // Ответ на запрос о получении параметров распознавания
    repeated string band_name = 1;
    repeated int32 accumulation_size = 2;
    repeated double threshold = 3;
    repeated double exceedance = 4;
}

message OnOffAccumulationRequest {          // Запрос на включение/выключение накопления
    bool accum_status = 1;
}

message OnOffAccumulationResponse {         // Ответ на запрос о включении/выключении накопления
    string accum_status = 1;
}

message GetProcessStatusRequest {           // Запрос о статусе процесса
    string channel_name = 1;
}

message GetProcessStatusResponse {          // Ответ на запрос о статусе процесса
    bool status = 1;
}

message RestartProcessRequest {             // Запрос на рестарт процесса
    string channel_name = 1;
}

message RestartProcessResponse {            // Ответ на запрос о рестарте процесса
    bool status = 1;
}

message AlinxSetFrequencyRequest {          // Запрос на установку центральной частоты
    int64 value = 1;
}

message AlinxSetFrequencyResponse {         // Ответ на запрос об установке центральной частоты
    string status = 1;
}

message AlinxSetAttenuationRequest {        // Запрос на установку аттенюации канала
    string channel_name = 1;
    int32 value = 2;
}

message AlinxSetAttenuationResponse {       // Ответ на запрос об установке аттенюации канала
    string status = 1;
}

message AlinxSoftVerRequest {               // Запрос на версию ПО в доп коробке для Alinx
}

message AlinxSoftVerResponse {              // Ответ на запрос о версии ПО в доп коробке для Alinx
    string version = 1;
}

message AlinxLoadDetectRequest {            // Запрос о состоянии LoadDetect для Alinx
}

message AlinxLoadDetectResponse {           // Ответ на запрос о состоянии LoadDetect для Alinx
    string state = 1;
}

message SetAutoscanFreqRequest {            // Запрос на установку автосканирования по частотам
    bool status = 1;
}

message SetAutoscanFreqResponse {           // Ответ на запрос об установке автосканирования по частотам
    string status = 1;
}

message NNInfoRequest {
    repeated string channels = 1;
}

message NNInfoResponse {
    repeated string band_name = 1;
    repeated string versions = 2;
    repeated string names = 3;
}

message SignalSettingsRequest {             // Запрос о параметрах получаемного сигнала
    repeated string channels = 1;
}

message SignalSettingsResponse {            // Ответ на запрос о параметрах получаемного сигнала
    repeated string band_name = 1;
    repeated int32 width = 2;
    repeated int32 height = 3;
    repeated int64 fs = 4;
}

message USRPSetFrequencyRequest {
    string channel_name = 1;
    int64 value = 2;
}

message USRPSetFrequencyResponse {
    string status = 1;
}


// Сервисы обработки данных
service DataProcessingService {
    rpc GetAvailableChannels (ChannelsRequest) returns (ChannelsResponse);
    rpc StartChannel (StartChannelRequest) returns (StartChannelResponse);   // RPC для старта канала обработки
    rpc ProceedDataStream (ProceedDataStreamRequest) returns (stream DataResponse); // RPC для отправки данных
    rpc ServerErrorStream (VoidRequest) returns (stream ServerErrorResponse); // RPC для серверных ошибок
    rpc ZScaleChanging (ZScaleRequest) returns (ZScaleResponse);
    rpc SaveConfig (SaveConfigRequest) returns (SaveConfigResponse);
    rpc RecognitionSettings (RecognitionSettingsRequest) returns (RecognitionSettingsResponse);
    rpc GetRecognitionSettings (GetRecognitionSettingsRequest) returns (GetRecognitionSettingsResponse);
    rpc GetCurrentZScale (CurrentZScaleRequest) returns (CurrentZScaleResponse);
    rpc OnOffAccumulation (OnOffAccumulationRequest) returns (OnOffAccumulationResponse);
    rpc GetProcessStatus (GetProcessStatusRequest) returns (GetProcessStatusResponse);
    rpc RestartProcess (RestartProcessRequest) returns (RestartProcessResponse);
    rpc AlinxSetFrequency (AlinxSetFrequencyRequest) returns (AlinxSetFrequencyResponse);
    rpc AlinxSetAttenuation (AlinxSetAttenuationRequest) returns (AlinxSetAttenuationResponse);
    rpc AlinxSoftVer (AlinxSoftVerRequest) returns (AlinxSoftVerResponse);
    rpc AlinxLoadDetectState (AlinxLoadDetectRequest) returns (AlinxLoadDetectResponse);
    rpc NNInfo (NNInfoRequest) returns (NNInfoResponse);
    rpc SignalSettings (SignalSettingsRequest) returns (SignalSettingsResponse);
    rpc AutoscanFrequency (SetAutoscanFreqRequest) returns (SetAutoscanFreqResponse);
    rpc USRPSetFrequency (USRPSetFrequencyRequest) returns (USRPSetFrequencyResponse);
}